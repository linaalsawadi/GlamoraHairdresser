// <auto-generated />
using System;
using GlamoraHairdresser.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlamoraHairdresser.Data.Migrations
{
    [DbContext(typeof(GlamoraDbContext))]
    [Migration("20251027150125_WorkingHours")]
    partial class WorkingHours
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("PriceAtBooking")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceOfferingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("datetime2(0)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceOfferingId");

                    b.HasIndex("CustomerId", "StartUtc")
                        .HasDatabaseName("IX_Appt_Customer_Start");

                    b.HasIndex("SalonId", "StartUtc")
                        .HasDatabaseName("IX_Appt_Salon_Start");

                    b.HasIndex("WorkerId", "StartUtc", "EndUtc")
                        .IsUnique();

                    b.ToTable("Appointments", null, t =>
                        {
                            t.HasCheckConstraint("CK_Appt_Time", "[StartUtc] < [EndUtc]");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.EmployeeSkill", b =>
                {
                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceOfferingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkerId", "ServiceOfferingId");

                    b.HasIndex("ServiceOfferingId");

                    b.ToTable("EmployeeSkills");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Name", "Address")
                        .IsUnique()
                        .HasFilter("[Address] IS NOT NULL");

                    b.ToTable("Salons", t =>
                        {
                            t.HasCheckConstraint("CK_Salon_Name_NotBlank", "LEN(LTRIM(RTRIM([Name]))) > 0");

                            t.HasCheckConstraint("CK_Salon_Phone_NotBlank", "LEN([PhoneNumber]) >= 7");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.ServiceOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId", "Name")
                        .IsUnique();

                    b.ToTable("ServiceOfferings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Service_Duration", "[DurationMinutes] BETWEEN 5 AND 600");

                            t.HasCheckConstraint("CK_Service_Price", "[Price] >= 0");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.SpecialWorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time(0)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time(0)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId", "Date")
                        .IsUnique();

                    b.ToTable("SpecialWorkingHours", null, t =>
                        {
                            t.HasCheckConstraint("CK_SWH_Time", "([IsClosed] = 1) OR ([OpenTime] IS NOT NULL AND [CloseTime] IS NOT NULL AND [OpenTime] < [CloseTime])");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IterationCount")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Prf")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_UserType_NotEmpty", "[UserType] IN ('Admin','Worker','Customer')");
                        });

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkerAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("time(0)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("time(0)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Avail_Date");

                    b.HasIndex("WorkerId", "Date")
                        .HasDatabaseName("IX_Avail_Worker_Date");

                    b.HasIndex("WorkerId", "Date", "Start", "End")
                        .IsUnique()
                        .HasDatabaseName("UX_Avail_Worker_Date_TimeRange");

                    b.ToTable("WorkerAvailabilities", null, t =>
                        {
                            t.HasCheckConstraint("CK_Avail_Time", "[Start] < [End]");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkerSpecialWorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsOffDay")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId", "Date")
                        .IsUnique();

                    b.ToTable("WorkerSpecialWorkingHours", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkerSpecialWorkingHour_Times", "([IsOffDay] = 1) OR ([OpenTime] < [CloseTime])");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkerWorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId", "DayOfWeek")
                        .IsUnique();

                    b.ToTable("WorkerWorkingHours", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkerWorkingHour_Times", "[OpenTime] < [CloseTime]");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId", "DayOfWeek")
                        .IsUnique();

                    b.ToTable("WorkingHours", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkingHour_Day", "[DayOfWeek] BETWEEN 1 AND 7");

                            t.HasCheckConstraint("CK_WorkingHour_Time", "[OpenTime] < [CloseTime]");
                        });
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("GlamoraHairdresser.Data.Entities.User");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_UserType_NotEmpty", "[UserType] IN ('Admin','Worker','Customer')");
                        });

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Customer", b =>
                {
                    b.HasBaseType("GlamoraHairdresser.Data.Entities.User");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_UserType_NotEmpty", "[UserType] IN ('Admin','Worker','Customer')");
                        });

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Worker", b =>
                {
                    b.HasBaseType("GlamoraHairdresser.Data.Entities.User");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasIndex("SalonId");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_UserType_NotEmpty", "[UserType] IN ('Admin','Worker','Customer')");
                        });

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Appointment", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GlamoraHairdresser.Data.Entities.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GlamoraHairdresser.Data.Entities.ServiceOffering", "ServiceOffering")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GlamoraHairdresser.Data.Entities.Worker", "Worker")
                        .WithMany("Appointments")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Salon");

                    b.Navigation("ServiceOffering");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.ServiceOffering", "ServiceOffering")
                        .WithMany("Workers")
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlamoraHairdresser.Data.Entities.Worker", "Worker")
                        .WithMany("Skills")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceOffering");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.ServiceOffering", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Salon", "Salon")
                        .WithMany("Services")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.SpecialWorkingHour", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkerAvailability", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Worker", "Worker")
                        .WithMany("Availabilities")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkerSpecialWorkingHour", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkerWorkingHour", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.WorkingHour", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Salon", "Salon")
                        .WithMany("WorkingHours")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Worker", b =>
                {
                    b.HasOne("GlamoraHairdresser.Data.Entities.Salon", "Salon")
                        .WithMany("Workers")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Salon", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("Workers");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.ServiceOffering", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("GlamoraHairdresser.Data.Entities.Worker", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
